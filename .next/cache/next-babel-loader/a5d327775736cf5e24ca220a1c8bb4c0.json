{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getPostsApi } from '../api';\nimport { actionTypes } from '../types';\nconst {\n  GET_POSTS_INIT,\n  GET_POSTS_SUCCESS,\n  GET_POSTS_FAILURE\n} = actionTypes;\nexport const getPosts = params => dispatch => {\n  dispatch({\n    type: GET_POSTS_INIT\n  });\n  getPostsApi(params).then(response => {\n    dispatch({\n      type: GET_POSTS_SUCCESS,\n      payload: _objectSpread({}, response)\n    });\n  });\n};","map":{"version":3,"sources":["/Users/pecherkiy/Documents/DevelopsToday/store/actions/postsActions.js"],"names":["getPostsApi","actionTypes","GET_POSTS_INIT","GET_POSTS_SUCCESS","GET_POSTS_FAILURE","getPosts","params","dispatch","type","then","response","payload"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,QAA5B;AACA,SAASC,WAAT,QAA4B,UAA5B;AAEA,MAAM;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA,iBAAlB;AAAqCC,EAAAA;AAArC,IAA2DH,WAAjE;AAEA,OAAO,MAAMI,QAAQ,GAAIC,MAAD,IAAaC,QAAD,IAAc;AAC9CA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAEN;AADD,GAAD,CAAR;AAGAF,EAAAA,WAAW,CAACM,MAAD,CAAX,CAAoBG,IAApB,CAA0BC,QAAD,IAAc;AACnCH,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEL,iBADD;AAELQ,MAAAA,OAAO,oBAAOD,QAAP;AAFF,KAAD,CAAR;AAIH,GALD;AAMH,CAVM","sourcesContent":["import { getPostsApi } from '../api';\nimport { actionTypes } from '../types';\n\nconst { GET_POSTS_INIT, GET_POSTS_SUCCESS, GET_POSTS_FAILURE } = actionTypes;\n\nexport const getPosts = (params) => (dispatch) => {\n    dispatch({\n        type: GET_POSTS_INIT,\n    });\n    getPostsApi(params).then((response) => {\n        dispatch({\n            type: GET_POSTS_SUCCESS,\n            payload: { ...response },\n        });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}