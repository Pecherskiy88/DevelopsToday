{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getPostsApi, getCurrentPostApi } from '../api';\nimport { actionTypes } from '../types';\nconst {\n  GET_POSTS_INIT,\n  GET_POSTS_SUCCESS,\n  GET_POSTS_FAILURE,\n  GET_CURRENT_POST_INIT,\n  GET_CURRENT_POST_SUCCESS,\n  GET_CURRENT_POST_FAILURE,\n  CREATE_POST_INIT,\n  CREATE_POST_SUCCESS,\n  CREATE_POST_FAILURE,\n  CLEAR_STORE\n} = actionTypes;\nexport const getPosts = params => dispatch => {\n  dispatch({\n    type: GET_POSTS_INIT\n  });\n  getPostsApi(params).then(response => {\n    dispatch({\n      type: GET_POSTS_SUCCESS,\n      payload: _objectSpread({}, response)\n    });\n  }).catch(error => {\n    dispatch({\n      type: GET_POSTS_FAILURE,\n      payload: _objectSpread({}, error)\n    });\n  });\n};\nexport const getCurrentPost = id => dispatch => {\n  dispatch({\n    type: GET_CURRENT_POST_INIT\n  });\n  getCurrentPostApi(id).then(response => {\n    dispatch({\n      type: GET_CURRENT_POST_SUCCESS,\n      payload: _objectSpread({}, response)\n    });\n  }).catch(error => {\n    dispatch({\n      type: GET_CURRENT_POST_FAILURE,\n      payload: _objectSpread({}, error)\n    });\n  });\n};\nexport const createPost = data => dispatch => {\n  dispatch({\n    type: CREATE_POST_INIT\n  });\n  getCurrentPostApi(data).then(() => {\n    dispatch({\n      type: CREATE_POST_SUCCESS,\n      payload: _objectSpread({}, response)\n    });\n  }).catch(error => {\n    dispatch({\n      type: CREATE_POST_FAILURE,\n      payload: _objectSpread({}, error)\n    });\n  });\n};\nexport const clearStore = () => ({\n  type: CLEAR_STORE\n});","map":{"version":3,"sources":["/Users/pecherkiy/Documents/DevelopsToday/store/actions/postsActions.js"],"names":["getPostsApi","getCurrentPostApi","actionTypes","GET_POSTS_INIT","GET_POSTS_SUCCESS","GET_POSTS_FAILURE","GET_CURRENT_POST_INIT","GET_CURRENT_POST_SUCCESS","GET_CURRENT_POST_FAILURE","CREATE_POST_INIT","CREATE_POST_SUCCESS","CREATE_POST_FAILURE","CLEAR_STORE","getPosts","params","dispatch","type","then","response","payload","catch","error","getCurrentPost","id","createPost","data","clearStore"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,iBAAtB,QAA+C,QAA/C;AACA,SAASC,WAAT,QAA4B,UAA5B;AAEA,MAAM;AACFC,EAAAA,cADE;AAEFC,EAAAA,iBAFE;AAGFC,EAAAA,iBAHE;AAIFC,EAAAA,qBAJE;AAKFC,EAAAA,wBALE;AAMFC,EAAAA,wBANE;AAOFC,EAAAA,gBAPE;AAQFC,EAAAA,mBARE;AASFC,EAAAA,mBATE;AAUFC,EAAAA;AAVE,IAWFV,WAXJ;AAaA,OAAO,MAAMW,QAAQ,GAAIC,MAAD,IAAaC,QAAD,IAAc;AAC9CA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAEb;AADD,GAAD,CAAR;AAGAH,EAAAA,WAAW,CAACc,MAAD,CAAX,CACKG,IADL,CACWC,QAAD,IAAc;AAChBH,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEZ,iBADD;AAELe,MAAAA,OAAO,oBAAOD,QAAP;AAFF,KAAD,CAAR;AAIH,GANL,EAOKE,KAPL,CAOYC,KAAD,IAAW;AACdN,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEX,iBADD;AAELc,MAAAA,OAAO,oBAAOE,KAAP;AAFF,KAAD,CAAR;AAIH,GAZL;AAaH,CAjBM;AAmBP,OAAO,MAAMC,cAAc,GAAIC,EAAD,IAASR,QAAD,IAAc;AAChDA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAEV;AADD,GAAD,CAAR;AAGAL,EAAAA,iBAAiB,CAACsB,EAAD,CAAjB,CACKN,IADL,CACWC,QAAD,IAAc;AAChBH,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAET,wBADD;AAELY,MAAAA,OAAO,oBAAOD,QAAP;AAFF,KAAD,CAAR;AAIH,GANL,EAOKE,KAPL,CAOYC,KAAD,IAAW;AACdN,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAER,wBADD;AAELW,MAAAA,OAAO,oBAAOE,KAAP;AAFF,KAAD,CAAR;AAIH,GAZL;AAaH,CAjBM;AAmBP,OAAO,MAAMG,UAAU,GAAIC,IAAD,IAAWV,QAAD,IAAc;AAC9CA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAEP;AADD,GAAD,CAAR;AAGAR,EAAAA,iBAAiB,CAACwB,IAAD,CAAjB,CACKR,IADL,CACU,MAAM;AACRF,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEN,mBADD;AAELS,MAAAA,OAAO,oBAAOD,QAAP;AAFF,KAAD,CAAR;AAIH,GANL,EAOKE,KAPL,CAOYC,KAAD,IAAW;AACdN,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEL,mBADD;AAELQ,MAAAA,OAAO,oBAAOE,KAAP;AAFF,KAAD,CAAR;AAIH,GAZL;AAaH,CAjBM;AAmBP,OAAO,MAAMK,UAAU,GAAG,OAAO;AAC7BV,EAAAA,IAAI,EAAEJ;AADuB,CAAP,CAAnB","sourcesContent":["import { getPostsApi, getCurrentPostApi } from '../api';\nimport { actionTypes } from '../types';\n\nconst {\n    GET_POSTS_INIT,\n    GET_POSTS_SUCCESS,\n    GET_POSTS_FAILURE,\n    GET_CURRENT_POST_INIT,\n    GET_CURRENT_POST_SUCCESS,\n    GET_CURRENT_POST_FAILURE,\n    CREATE_POST_INIT,\n    CREATE_POST_SUCCESS,\n    CREATE_POST_FAILURE,\n    CLEAR_STORE,\n} = actionTypes;\n\nexport const getPosts = (params) => (dispatch) => {\n    dispatch({\n        type: GET_POSTS_INIT,\n    });\n    getPostsApi(params)\n        .then((response) => {\n            dispatch({\n                type: GET_POSTS_SUCCESS,\n                payload: { ...response },\n            });\n        })\n        .catch((error) => {\n            dispatch({\n                type: GET_POSTS_FAILURE,\n                payload: { ...error },\n            });\n        });\n};\n\nexport const getCurrentPost = (id) => (dispatch) => {\n    dispatch({\n        type: GET_CURRENT_POST_INIT,\n    });\n    getCurrentPostApi(id)\n        .then((response) => {\n            dispatch({\n                type: GET_CURRENT_POST_SUCCESS,\n                payload: { ...response },\n            });\n        })\n        .catch((error) => {\n            dispatch({\n                type: GET_CURRENT_POST_FAILURE,\n                payload: { ...error },\n            });\n        });\n};\n\nexport const createPost = (data) => (dispatch) => {\n    dispatch({\n        type: CREATE_POST_INIT,\n    });\n    getCurrentPostApi(data)\n        .then(() => {\n            dispatch({\n                type: CREATE_POST_SUCCESS,\n                payload: { ...response },\n            });\n        })\n        .catch((error) => {\n            dispatch({\n                type: CREATE_POST_FAILURE,\n                payload: { ...error },\n            });\n        });\n};\n\nexport const clearStore = () => ({\n    type: CLEAR_STORE,\n});\n"]},"metadata":{},"sourceType":"module"}