{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineReducers } from 'redux';\nimport { actionTypes } from '../types';\nconst {\n  GET_POSTS_INIT,\n  GET_POSTS_SUCCESS,\n  GET_POSTS_FAILURE,\n  GET_CURRENT_POST_INIT,\n  GET_CURRENT_POST_SUCCESS,\n  GET_CURRENT_POST_FAILURE,\n  CREATE_POST_INIT,\n  CREATE_POST_SUCCESS,\n  CREATE_POST_FAILURE,\n  CLEAR_STORE\n} = actionTypes;\nconst initialPostsState = {\n  data: [],\n  loading: false,\n  loaded: false,\n  error: false,\n  errorData: {}\n};\n\nconst postsReducer = (state = initialPostsState, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case GET_POSTS_INIT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true,\n        loaded: false,\n        error: false,\n        errorData: {}\n      });\n\n    case GET_POSTS_SUCCESS:\n      {\n        const {\n          data\n        } = payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          data,\n          loading: false,\n          loaded: true,\n          error: false,\n          errorData: {}\n        });\n      }\n\n    case GET_POSTS_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        loaded: false,\n        error: true,\n        errorData: payload\n      });\n\n    case CLEAR_STORE:\n      return _objectSpread(_objectSpread({}, state), initialPostsState);\n\n    default:\n      return state;\n  }\n};\n\nconst initialCurrentPostState = {\n  post: {\n    title: '',\n    body: '',\n    id: null\n  },\n  loading: false,\n  loaded: false,\n  error: false,\n  errorData: {}\n};\n\nconst currentPostReducer = (state = initialCurrentPostState, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case GET_CURRENT_POST_INIT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true,\n        loaded: false,\n        error: false,\n        errorData: {}\n      });\n\n    case GET_CURRENT_POST_SUCCESS:\n      {\n        const {\n          data\n        } = payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          post: data,\n          loading: false,\n          loaded: true,\n          error: false,\n          errorData: {}\n        });\n      }\n\n    case GET_CURRENT_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        loaded: false,\n        error: true,\n        errorData: payload\n      });\n\n    case CLEAR_STORE:\n      return _objectSpread(_objectSpread({}, state), initialCurrentPostState);\n\n    default:\n      return state;\n  }\n};\n\nconst initialCreatePostState = {\n  sending: false,\n  sent: false,\n  error: false,\n  errorData: {}\n};\n\nconst createPostReducer = (state = initialCreatePostState, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case GET_CURRENT_POST_INIT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        sending: true,\n        sent: false,\n        error: false,\n        errorData: {}\n      });\n\n    case GET_CURRENT_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        sending: false,\n        sent: true,\n        error: false,\n        errorData: {}\n      });\n\n    case GET_CURRENT_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        sending: false,\n        sent: false,\n        error: true,\n        errorData: payload\n      });\n\n    case CLEAR_STORE:\n      return _objectSpread(_objectSpread({}, state), initialCreatePostState);\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  postsListData: postsReducer,\n  currentPost: currentPostReducer,\n  createPost: createPostReducer\n});","map":{"version":3,"sources":["/Users/pecherkiy/Documents/DevelopsToday/store/reducers/postsReducer.js"],"names":["combineReducers","actionTypes","GET_POSTS_INIT","GET_POSTS_SUCCESS","GET_POSTS_FAILURE","GET_CURRENT_POST_INIT","GET_CURRENT_POST_SUCCESS","GET_CURRENT_POST_FAILURE","CREATE_POST_INIT","CREATE_POST_SUCCESS","CREATE_POST_FAILURE","CLEAR_STORE","initialPostsState","data","loading","loaded","error","errorData","postsReducer","state","type","payload","initialCurrentPostState","post","title","body","id","currentPostReducer","initialCreatePostState","sending","sent","createPostReducer","postsListData","currentPost","createPost"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\nimport { actionTypes } from '../types';\n\nconst {\n    GET_POSTS_INIT,\n    GET_POSTS_SUCCESS,\n    GET_POSTS_FAILURE,\n    GET_CURRENT_POST_INIT,\n    GET_CURRENT_POST_SUCCESS,\n    GET_CURRENT_POST_FAILURE,\n    CREATE_POST_INIT,\n    CREATE_POST_SUCCESS,\n    CREATE_POST_FAILURE,\n    CLEAR_STORE,\n} = actionTypes;\n\nconst initialPostsState = {\n    data: [],\n    loading: false,\n    loaded: false,\n    error: false,\n    errorData: {},\n};\n\nconst postsReducer = (state = initialPostsState, { type, payload }) => {\n    switch (type) {\n        case GET_POSTS_INIT:\n            return { ...state, loading: true, loaded: false, error: false, errorData: {} };\n        case GET_POSTS_SUCCESS: {\n            const { data } = payload;\n            return { ...state, data, loading: false, loaded: true, error: false, errorData: {} };\n        }\n        case GET_POSTS_FAILURE:\n            return { ...state, loading: false, loaded: false, error: true, errorData: payload };\n        case CLEAR_STORE:\n            return { ...state, ...initialPostsState };\n        default:\n            return state;\n    }\n};\n\nconst initialCurrentPostState = {\n    post: {\n        title: '',\n        body: '',\n        id: null,\n    },\n    loading: false,\n    loaded: false,\n    error: false,\n    errorData: {},\n};\n\nconst currentPostReducer = (state = initialCurrentPostState, { type, payload }) => {\n    switch (type) {\n        case GET_CURRENT_POST_INIT:\n            return { ...state, loading: true, loaded: false, error: false, errorData: {} };\n        case GET_CURRENT_POST_SUCCESS: {\n            const { data } = payload;\n            return { ...state, post: data, loading: false, loaded: true, error: false, errorData: {} };\n        }\n        case GET_CURRENT_POST_FAILURE:\n            return { ...state, loading: false, loaded: false, error: true, errorData: payload };\n        case CLEAR_STORE:\n            return { ...state, ...initialCurrentPostState };\n        default:\n            return state;\n    }\n};\n\nconst initialCreatePostState = {\n    sending: false,\n    sent: false,\n    error: false,\n    errorData: {},\n};\n\nconst createPostReducer = (state = initialCreatePostState, { type, payload }) => {\n    switch (type) {\n        case GET_CURRENT_POST_INIT:\n            return { ...state, sending: true, sent: false, error: false, errorData: {} };\n        case GET_CURRENT_POST_SUCCESS:\n            return { ...state, sending: false, sent: true, error: false, errorData: {} };\n        case GET_CURRENT_POST_FAILURE:\n            return { ...state, sending: false, sent: false, error: true, errorData: payload };\n        case CLEAR_STORE:\n            return { ...state, ...initialCreatePostState };\n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({\n    postsListData: postsReducer,\n    currentPost: currentPostReducer,\n    createPost: createPostReducer,\n});\n"]},"metadata":{},"sourceType":"module"}