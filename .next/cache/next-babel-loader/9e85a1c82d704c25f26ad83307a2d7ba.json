{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { combineReducers } from 'redux';\nimport { actionTypes } from '../types';\nvar GET_POSTS_INIT = actionTypes.GET_POSTS_INIT,\n    GET_POSTS_SUCCESS = actionTypes.GET_POSTS_SUCCESS,\n    GET_POSTS_FAILURE = actionTypes.GET_POSTS_FAILURE;\nvar initialPostsState = {\n  data: [],\n  loading: false,\n  loaded: false,\n  error: false,\n  errorData: {}\n};\n\nvar postsReducer = function postsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialPostsState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case GET_POSTS_INIT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true,\n        loaded: false,\n        error: false,\n        errorData: {}\n      });\n\n    case GET_POSTS_SUCCESS:\n      {\n        var data = payload.data;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          data: data,\n          loading: false,\n          loaded: true,\n          error: false,\n          errorData: {}\n        });\n      }\n\n    case GET_POSTS_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        loaded: false,\n        error: true,\n        errorData: payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  postsListData: postsReducer\n});","map":{"version":3,"sources":["/Users/pecherkiy/Documents/DevelopsToday/store/reducers/postsReducer.js"],"names":["combineReducers","actionTypes","GET_POSTS_INIT","GET_POSTS_SUCCESS","GET_POSTS_FAILURE","initialPostsState","data","loading","loaded","error","errorData","postsReducer","state","type","payload","postsListData"],"mappings":";;;;;;AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,UAA5B;IAEQC,c,GAAyDD,W,CAAzDC,c;IAAgBC,iB,GAAyCF,W,CAAzCE,iB;IAAmBC,iB,GAAsBH,W,CAAtBG,iB;AAE3C,IAAMC,iBAAiB,GAAG;AACtBC,EAAAA,IAAI,EAAE,EADgB;AAEtBC,EAAAA,OAAO,EAAE,KAFa;AAGtBC,EAAAA,MAAM,EAAE,KAHc;AAItBC,EAAAA,KAAK,EAAE,KAJe;AAKtBC,EAAAA,SAAS,EAAE;AALW,CAA1B;;AAQA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAkD;AAAA,MAAjDC,KAAiD,uEAAzCP,iBAAyC;;AAAA;AAAA,MAApBQ,IAAoB,QAApBA,IAAoB;AAAA,MAAdC,OAAc,QAAdA,OAAc;;AACnE,UAAQD,IAAR;AACI,SAAKX,cAAL;AACI,6CAAYU,KAAZ;AAAmBL,QAAAA,OAAO,EAAE,IAA5B;AAAkCC,QAAAA,MAAM,EAAE,KAA1C;AAAiDC,QAAAA,KAAK,EAAE,KAAxD;AAA+DC,QAAAA,SAAS,EAAE;AAA1E;;AACJ,SAAKP,iBAAL;AAAwB;AAAA,YACZG,IADY,GACHQ,OADG,CACZR,IADY;AAEpB,+CAAYM,KAAZ;AAAmBN,UAAAA,IAAI,EAAJA,IAAnB;AAAyBC,UAAAA,OAAO,EAAE,KAAlC;AAAyCC,UAAAA,MAAM,EAAE,IAAjD;AAAuDC,UAAAA,KAAK,EAAE,KAA9D;AAAqEC,UAAAA,SAAS,EAAE;AAAhF;AACH;;AACD,SAAKN,iBAAL;AACI,6CAAYQ,KAAZ;AAAmBL,QAAAA,OAAO,EAAE,KAA5B;AAAmCC,QAAAA,MAAM,EAAE,KAA3C;AAAkDC,QAAAA,KAAK,EAAE,IAAzD;AAA+DC,QAAAA,SAAS,EAAEI;AAA1E;;AACJ;AACI,aAAOF,KAAP;AAVR;AAYH,CAbD;;AAeA,eAAeZ,eAAe,CAAC;AAC3Be,EAAAA,aAAa,EAAEJ;AADY,CAAD,CAA9B","sourcesContent":["import { combineReducers } from 'redux';\nimport { actionTypes } from '../types';\n\nconst { GET_POSTS_INIT, GET_POSTS_SUCCESS, GET_POSTS_FAILURE } = actionTypes;\n\nconst initialPostsState = {\n    data: [],\n    loading: false,\n    loaded: false,\n    error: false,\n    errorData: {},\n};\n\nconst postsReducer = (state = initialPostsState, { type, payload }) => {\n    switch (type) {\n        case GET_POSTS_INIT:\n            return { ...state, loading: true, loaded: false, error: false, errorData: {} };\n        case GET_POSTS_SUCCESS: {\n            const { data } = payload;\n            return { ...state, data, loading: false, loaded: true, error: false, errorData: {} };\n        }\n        case GET_POSTS_FAILURE:\n            return { ...state, loading: false, loaded: false, error: true, errorData: payload };\n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({\n    postsListData: postsReducer,\n});\n"]},"metadata":{},"sourceType":"module"}