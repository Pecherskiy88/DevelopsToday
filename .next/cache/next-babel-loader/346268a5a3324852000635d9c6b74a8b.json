{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getPostsApi, getCurrentPostApi, createPostApi } from '../api';\nimport { actionTypes } from '../types';\nconst {\n  GET_POSTS_INIT,\n  GET_POSTS_SUCCESS,\n  GET_POSTS_FAILURE,\n  GET_CURRENT_POST_INIT,\n  GET_CURRENT_POST_SUCCESS,\n  GET_CURRENT_POST_FAILURE,\n  CREATE_POST_INIT,\n  CREATE_POST_SUCCESS,\n  CREATE_POST_FAILURE,\n  SET_FIELD_VALUE,\n  CLEAR_STORE\n} = actionTypes;\nexport const getPosts = params => dispatch => {\n  dispatch({\n    type: GET_POSTS_INIT\n  });\n  getPostsApi(params).then(response => {\n    dispatch({\n      type: GET_POSTS_SUCCESS,\n      payload: _objectSpread({}, response)\n    });\n  }).catch(error => {\n    dispatch({\n      type: GET_POSTS_FAILURE,\n      payload: _objectSpread({}, error)\n    });\n  });\n};\nexport const getCurrentPost = id => dispatch => {\n  dispatch({\n    type: GET_CURRENT_POST_INIT\n  });\n  getCurrentPostApi(id).then(response => {\n    dispatch({\n      type: GET_CURRENT_POST_SUCCESS,\n      payload: _objectSpread({}, response)\n    });\n  }).catch(error => {\n    dispatch({\n      type: GET_CURRENT_POST_FAILURE,\n      payload: _objectSpread({}, error)\n    });\n  });\n};\nexport const sendPost = data => dispatch => {\n  dispatch({\n    type: CREATE_POST_INIT\n  });\n  createPostApi(data).then(() => {\n    console.log('data: ', data);\n    dispatch({\n      type: CREATE_POST_SUCCESS,\n      payload: _objectSpread({}, response)\n    });\n  }).catch(error => {\n    dispatch({\n      type: CREATE_POST_FAILURE,\n      payload: _objectSpread({}, error)\n    });\n  });\n};\nexport const setFieldValue = (name, value) => ({\n  type: SET_FIELD_VALUE,\n  payload: {\n    name,\n    value\n  }\n});\nexport const clearStore = () => ({\n  type: CLEAR_STORE\n});","map":{"version":3,"sources":["/Users/pecherkiy/Documents/DevelopsToday/store/actions/postsActions.js"],"names":["getPostsApi","getCurrentPostApi","createPostApi","actionTypes","GET_POSTS_INIT","GET_POSTS_SUCCESS","GET_POSTS_FAILURE","GET_CURRENT_POST_INIT","GET_CURRENT_POST_SUCCESS","GET_CURRENT_POST_FAILURE","CREATE_POST_INIT","CREATE_POST_SUCCESS","CREATE_POST_FAILURE","SET_FIELD_VALUE","CLEAR_STORE","getPosts","params","dispatch","type","then","response","payload","catch","error","getCurrentPost","id","sendPost","data","console","log","setFieldValue","name","value","clearStore"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,iBAAtB,EAAyCC,aAAzC,QAA8D,QAA9D;AACA,SAASC,WAAT,QAA4B,UAA5B;AAEA,MAAM;AACFC,EAAAA,cADE;AAEFC,EAAAA,iBAFE;AAGFC,EAAAA,iBAHE;AAIFC,EAAAA,qBAJE;AAKFC,EAAAA,wBALE;AAMFC,EAAAA,wBANE;AAOFC,EAAAA,gBAPE;AAQFC,EAAAA,mBARE;AASFC,EAAAA,mBATE;AAUFC,EAAAA,eAVE;AAWFC,EAAAA;AAXE,IAYFX,WAZJ;AAcA,OAAO,MAAMY,QAAQ,GAAIC,MAAD,IAAaC,QAAD,IAAc;AAC9CA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAEd;AADD,GAAD,CAAR;AAGAJ,EAAAA,WAAW,CAACgB,MAAD,CAAX,CACKG,IADL,CACWC,QAAD,IAAc;AAChBH,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEb,iBADD;AAELgB,MAAAA,OAAO,oBAAOD,QAAP;AAFF,KAAD,CAAR;AAIH,GANL,EAOKE,KAPL,CAOYC,KAAD,IAAW;AACdN,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEZ,iBADD;AAELe,MAAAA,OAAO,oBAAOE,KAAP;AAFF,KAAD,CAAR;AAIH,GAZL;AAaH,CAjBM;AAmBP,OAAO,MAAMC,cAAc,GAAIC,EAAD,IAASR,QAAD,IAAc;AAChDA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAEX;AADD,GAAD,CAAR;AAGAN,EAAAA,iBAAiB,CAACwB,EAAD,CAAjB,CACKN,IADL,CACWC,QAAD,IAAc;AAChBH,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEV,wBADD;AAELa,MAAAA,OAAO,oBAAOD,QAAP;AAFF,KAAD,CAAR;AAIH,GANL,EAOKE,KAPL,CAOYC,KAAD,IAAW;AACdN,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAET,wBADD;AAELY,MAAAA,OAAO,oBAAOE,KAAP;AAFF,KAAD,CAAR;AAIH,GAZL;AAaH,CAjBM;AAmBP,OAAO,MAAMG,QAAQ,GAAIC,IAAD,IAAWV,QAAD,IAAc;AAC5CA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAER;AADD,GAAD,CAAR;AAGAR,EAAAA,aAAa,CAACyB,IAAD,CAAb,CACKR,IADL,CACU,MAAM;AACRS,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,IAAtB;AACAV,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEP,mBADD;AAELU,MAAAA,OAAO,oBAAOD,QAAP;AAFF,KAAD,CAAR;AAIH,GAPL,EAQKE,KARL,CAQYC,KAAD,IAAW;AACdN,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEN,mBADD;AAELS,MAAAA,OAAO,oBAAOE,KAAP;AAFF,KAAD,CAAR;AAIH,GAbL;AAcH,CAlBM;AAoBP,OAAO,MAAMO,aAAa,GAAG,CAACC,IAAD,EAAOC,KAAP,MAAkB;AAC3Cd,EAAAA,IAAI,EAAEL,eADqC;AAE3CQ,EAAAA,OAAO,EAAE;AAAEU,IAAAA,IAAF;AAAQC,IAAAA;AAAR;AAFkC,CAAlB,CAAtB;AAKP,OAAO,MAAMC,UAAU,GAAG,OAAO;AAC7Bf,EAAAA,IAAI,EAAEJ;AADuB,CAAP,CAAnB","sourcesContent":["import { getPostsApi, getCurrentPostApi, createPostApi } from '../api';\nimport { actionTypes } from '../types';\n\nconst {\n    GET_POSTS_INIT,\n    GET_POSTS_SUCCESS,\n    GET_POSTS_FAILURE,\n    GET_CURRENT_POST_INIT,\n    GET_CURRENT_POST_SUCCESS,\n    GET_CURRENT_POST_FAILURE,\n    CREATE_POST_INIT,\n    CREATE_POST_SUCCESS,\n    CREATE_POST_FAILURE,\n    SET_FIELD_VALUE,\n    CLEAR_STORE,\n} = actionTypes;\n\nexport const getPosts = (params) => (dispatch) => {\n    dispatch({\n        type: GET_POSTS_INIT,\n    });\n    getPostsApi(params)\n        .then((response) => {\n            dispatch({\n                type: GET_POSTS_SUCCESS,\n                payload: { ...response },\n            });\n        })\n        .catch((error) => {\n            dispatch({\n                type: GET_POSTS_FAILURE,\n                payload: { ...error },\n            });\n        });\n};\n\nexport const getCurrentPost = (id) => (dispatch) => {\n    dispatch({\n        type: GET_CURRENT_POST_INIT,\n    });\n    getCurrentPostApi(id)\n        .then((response) => {\n            dispatch({\n                type: GET_CURRENT_POST_SUCCESS,\n                payload: { ...response },\n            });\n        })\n        .catch((error) => {\n            dispatch({\n                type: GET_CURRENT_POST_FAILURE,\n                payload: { ...error },\n            });\n        });\n};\n\nexport const sendPost = (data) => (dispatch) => {\n    dispatch({\n        type: CREATE_POST_INIT,\n    });\n    createPostApi(data)\n        .then(() => {\n            console.log('data: ', data);\n            dispatch({\n                type: CREATE_POST_SUCCESS,\n                payload: { ...response },\n            });\n        })\n        .catch((error) => {\n            dispatch({\n                type: CREATE_POST_FAILURE,\n                payload: { ...error },\n            });\n        });\n};\n\nexport const setFieldValue = (name, value) => ({\n    type: SET_FIELD_VALUE,\n    payload: { name, value },\n});\n\nexport const clearStore = () => ({\n    type: CLEAR_STORE,\n});\n"]},"metadata":{},"sourceType":"module"}